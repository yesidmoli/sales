

import { Fragment, useEffect, useState } from "react";
import Header from "../layout/Header";
import Menu from "../layout/Menu";
import VentaSelector from "../Sales/VentaSelector";
import Axios from "../../config/axios";

import { Link } from "react-router-dom";

import ReactSearchBox from "react-search-box";
import { CiSearch } from "react-icons/ci"

import { useAuth } from "../context/AuthContext";





function ListClients(){

    const {token} = useAuth()

    //todos los clientes
    const [client, dataClients] = useState([]);

    //clientes obtenidos en la destructuracion
    const [clients, dataClient] = useState([]);


    console.log("son los clientes" ,clients)
    



   
    const [searchValue, setSearchValue] = useState('');
    const [filteredData, setFilteredData] = useState([]);

    


  useEffect(() => {
    consultarDatosCliente();
    setFilteredData(clients);
  }, []);

//   actualizar el estado searchValue con el valor de búsqueda ingresado por el usuario
  const handleSearch = (name) => {
    setSearchValue(name);

  };


   

      const consultarDatosCliente = async () => {
        try {
          // Realiza la consulta a la API para obtener datos de los clientes
          const response = await Axios.get(`/api/clients/`, {
            headers: {
              Authorization: `Token ${token}`,
            },
          });
          dataClients(response.data);
          dataClient(response.data.clients);
          
          
        } catch (error) {
          console.error('Error al consultar datos del cliente:', error);
        }
      };
    

      //formatear numeros 
      function formatNumber(number) {
      
        // Verifica si el número es válido y no es undefined o null
        if (!isNaN(parseInt(number, 10))) {
          // Convierte la cadena a un número y utiliza toLocaleString para formatear
          return parseFloat(number).toLocaleString('es-CO', {
            style: 'currency',
            currency: 'COP',
          });
        } else {
          return 0;
        }
      }
      
      
      
    return(
    
    <Fragment>
        <Header  icon={<svg xmlns="http://www.w3.org/2000/svg" width="28" height="60" viewBox="0 0 60 60" fill="none">
                <path d="M30 25C35.5228 25 40 20.5228 40 15C40 9.47715 35.5228 5 30 5C24.4772 5 20 9.47715 20 15C20 20.5228 24.4772 25 30 25Z" stroke="#1C274C" stroke-width="3"/>
                <path d="M49.9937 45C50 44.5895 50 44.1725 50 43.75C50 37.5367 41.0458 32.5 30 32.5C18.9543 32.5 10 37.5367 10 43.75C10 49.9633 10 55 30 55C35.5775 55 39.5995 54.6083 42.5 53.9085" stroke="#1C274C" stroke-width="3" stroke-linecap="round"/>
                </svg>}
                  title={'Clientes'}/>
        
      
                  <ReactSearchBox
        placeholder="Buscar cliente..."
        value={searchValue}
        onChange={handleSearch}
        data={filteredData}
        fuseConfigs={{ threshold: 0.2 }}
        inputHeight="3rem"
        leftIcon={<CiSearch />}
        iconBoxSize={"5rem"}
        inputFontSize="1.3rem"
      />
      <ul className="total-client">
        <li className="item-deuda item-client item-total" > 
        <h4 >Total clientes</h4>
        <h4>{client.total_clients}</h4>
      </li>
      </ul>

<ul className="list-total-clients">{searchValue ? (
    // Si hay un valor de búsqueda, aplica el filtro a deudas
    clients.filter((item) =>
        item.name.toLowerCase().includes(searchValue.toLowerCase())
      )
      .map((filteredItem) => (

        <Link to={`/debt-client/${filteredItem.id}`} className="item-link">
        <li className="item-deuda item-client item-deuda-2 " key={filteredItem.key}>
        <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" fill="none">
      <path d="M55.001 30.2621C55.001 35.2068 53.5347 40.0405 50.7876 44.1519C48.0404 48.2633 44.1358 51.4678 39.5675 53.3601C34.9991 55.2523 29.9722 55.7474 25.1225 54.7828C20.2728 53.8181 15.818 51.437 12.3216 47.9405C8.82509 44.4441 6.44397 39.9893 5.4793 35.1396C4.51463 30.2898 5.00973 25.263 6.902 20.6946C8.79427 16.1263 11.9987 12.2216 16.1101 9.47448C20.2215 6.72733 25.0552 5.26105 30 5.26105C33.2832 5.26105 36.5342 5.90772 39.5675 7.16414C42.6007 8.42056 45.3568 10.2621 47.6784 12.5837C49.9999 14.9052 51.8415 17.6613 53.0979 20.6946C54.3543 23.7279 55.001 26.9789 55.001 30.2621ZM47.9431 29.2832C48.0446 28.9678 48.0167 28.6251 47.8658 28.3303C47.7148 28.0354 47.453 27.8126 47.1379 27.7105L41.3021 25.8253C41.1438 25.7664 40.9753 25.7402 40.8066 25.7483C40.638 25.7563 40.4727 25.7984 40.3208 25.872C40.1689 25.9457 40.0334 26.0493 39.9226 26.1767C39.8118 26.3041 39.728 26.4526 39.6761 26.6133C39.6243 26.774 39.6055 26.9435 39.6209 27.1116C39.6363 27.2798 39.6857 27.443 39.7659 27.5916C39.8461 27.7402 39.9556 27.8709 40.0877 27.976C40.2199 28.0811 40.3719 28.1584 40.5347 28.2032L43.4779 29.1537L36.12 32.921C37.1469 31.416 37.6431 29.6117 37.5304 27.7932C37.4176 25.9747 36.7022 24.2456 35.4973 22.8789C34.2923 21.5123 32.6664 20.586 30.8763 20.2464C29.0862 19.9067 27.234 20.1731 25.6122 21.0035C23.9904 21.8338 22.6914 23.1808 21.9204 24.8316C21.1494 26.4825 20.9504 28.3431 21.3547 30.1197C21.759 31.8963 22.7436 33.4876 24.1531 34.6422C25.5625 35.7968 27.3165 36.449 29.1379 36.4958L25.9673 38.1158L19.4652 34.5663C19.2866 34.4685 19.0867 34.4159 18.883 34.4131C18.6793 34.4104 18.4781 34.4576 18.2968 34.5505L12.7326 37.3958C12.581 37.4672 12.4453 37.5683 12.3335 37.6932C12.2218 37.8181 12.1363 37.9642 12.0821 38.1228C12.0279 38.2814 12.0062 38.4492 12.0181 38.6164C12.0301 38.7835 12.0755 38.9466 12.1517 39.0958C12.228 39.2451 12.3334 39.3775 12.4618 39.4852C12.5902 39.5929 12.7389 39.6737 12.8991 39.7228C13.0594 39.7719 13.2278 39.7882 13.3945 39.7709C13.5612 39.7537 13.7227 39.703 13.8694 39.6221L18.8463 37.0768L25.3484 40.6295C25.5274 40.7265 25.7274 40.7784 25.931 40.7806C26.1347 40.7828 26.3357 40.7353 26.5168 40.6421L44.6431 31.3674L43.68 34.3516C43.6211 34.5098 43.5949 34.6784 43.603 34.847C43.611 35.0156 43.6531 35.1809 43.7268 35.3329C43.8004 35.4848 43.904 35.6202 44.0314 35.731C44.1588 35.8418 44.3073 35.9257 44.468 35.9775C44.6287 36.0294 44.7982 36.0482 44.9663 36.0327C45.1345 36.0173 45.2977 35.968 45.4463 35.8878C45.5949 35.8075 45.7256 35.6981 45.8307 35.5659C45.9358 35.4338 46.0131 35.2817 46.0579 35.1189L47.9431 29.2832ZM33.5463 31.2158C33.2805 31.6605 32.9384 32.055 32.5358 32.381L32.9684 33.2305C33.0882 33.4675 33.1089 33.7424 33.0259 33.9947C32.943 34.247 32.7633 34.456 32.5263 34.5758C32.2893 34.6956 32.0144 34.7163 31.7621 34.6333C31.5098 34.5504 31.3008 34.3707 31.181 34.1337L30.7579 33.2937C30.4393 33.3834 30.1123 33.4395 29.7821 33.461C29.7021 33.4674 29.621 33.4705 29.5389 33.4705C29.12 33.4668 28.7059 33.381 28.32 33.2179C28.0872 33.109 27.9052 32.9147 27.8117 32.6752C27.7182 32.4358 27.7204 32.1696 27.8178 31.9318C27.9152 31.6939 28.1004 31.5026 28.335 31.3976C28.5695 31.2925 28.8355 31.2817 29.0779 31.3674C29.2442 31.4425 29.426 31.4771 29.6084 31.4684C29.8048 31.4563 29.9994 31.4246 30.1894 31.3737C30.3846 31.3188 30.5756 31.2502 30.761 31.1684C31.1947 30.951 31.5606 30.619 31.8189 30.2084C32.0968 29.7347 31.9768 29.501 31.9231 29.3905C31.8349 29.2215 31.6894 29.0894 31.5126 29.0179C31.3277 28.9424 31.1311 28.8996 30.9315 28.8916C30.7291 28.891 30.5275 28.9164 30.3315 28.9674C30.1512 29.0162 29.9766 29.084 29.8105 29.1695C29.5394 29.3073 29.2574 29.4224 28.9673 29.5137C28.5748 29.6369 28.1661 29.7007 27.7547 29.7032C27.276 29.7048 26.8024 29.6047 26.3652 29.4095C25.7666 29.148 25.276 28.6886 24.9758 28.1084C24.7604 27.6616 24.6638 27.1667 24.6953 26.6717C24.7268 26.1766 24.8854 25.698 25.1558 25.2821C25.4184 24.8535 25.7527 24.4732 26.1442 24.1579L25.7337 23.34C25.6667 23.2222 25.6243 23.092 25.6092 22.9573C25.594 22.8226 25.6064 22.6863 25.6455 22.5565C25.6846 22.4268 25.7496 22.3063 25.8367 22.2024C25.9237 22.0985 26.0309 22.0134 26.1518 21.9522C26.2728 21.891 26.4048 21.855 26.5401 21.8463C26.6753 21.8377 26.8109 21.8566 26.9387 21.9019C27.0664 21.9472 27.1836 22.018 27.2831 22.1099C27.3827 22.2019 27.4626 22.3131 27.5179 22.4368L27.9442 23.2832C28.2731 23.2013 28.6096 23.1537 28.9484 23.141C29.3764 23.1233 29.8042 23.1821 30.2115 23.3147C30.4507 23.4069 30.6453 23.5873 30.7554 23.8187C30.8655 24.0502 30.8827 24.315 30.8033 24.5587C30.724 24.8024 30.5542 25.0064 30.329 25.1286C30.1037 25.2509 29.8402 25.2821 29.5926 25.2158C29.4133 25.1577 29.2251 25.132 29.0368 25.14C28.8335 25.1473 28.6315 25.1748 28.4336 25.2221L28.3737 25.2347C28.2161 25.27 28.0619 25.3186 27.9126 25.38C27.4888 25.5913 27.1291 25.9118 26.8705 26.3084C26.7747 26.4355 26.714 26.5856 26.6946 26.7436C26.6752 26.9016 26.6977 27.0619 26.76 27.2084C26.8554 27.3753 27.0029 27.5062 27.18 27.581C27.3561 27.6588 27.5464 27.6997 27.7389 27.701H27.7452C27.9572 27.7002 28.1678 27.6683 28.3705 27.6063C28.5553 27.5477 28.7349 27.4738 28.9073 27.3853C29.2014 27.2352 29.5105 27.1166 29.8294 27.0316C30.2005 26.935 30.5828 26.8883 30.9663 26.8926C31.4104 26.9043 31.8489 26.9952 32.261 27.161C32.8877 27.4135 33.4016 27.8848 33.7073 28.4874C33.9214 28.9164 34.0194 29.394 33.9917 29.8726C33.964 30.3513 33.8084 30.8143 33.5463 31.2158Z" fill="#248B13"/>
      </svg>
      <h4>{filteredItem.name}</h4>
        </li>
        </Link>
        
      ))
  ) : (
    // Si no hay valor de búsqueda, muestra todas las deudas
    clients.map((item) => (
        <Link to={`/debt-client/${item.id}`} className="item-link">
      <li className="item-deuda item-client item-deuda-2" key={item.key}> <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" fill="none">
      <path d="M55.001 30.2621C55.001 35.2068 53.5347 40.0405 50.7876 44.1519C48.0404 48.2633 44.1358 51.4678 39.5675 53.3601C34.9991 55.2523 29.9722 55.7474 25.1225 54.7828C20.2728 53.8181 15.818 51.437 12.3216 47.9405C8.82509 44.4441 6.44397 39.9893 5.4793 35.1396C4.51463 30.2898 5.00973 25.263 6.902 20.6946C8.79427 16.1263 11.9987 12.2216 16.1101 9.47448C20.2215 6.72733 25.0552 5.26105 30 5.26105C33.2832 5.26105 36.5342 5.90772 39.5675 7.16414C42.6007 8.42056 45.3568 10.2621 47.6784 12.5837C49.9999 14.9052 51.8415 17.6613 53.0979 20.6946C54.3543 23.7279 55.001 26.9789 55.001 30.2621ZM47.9431 29.2832C48.0446 28.9678 48.0167 28.6251 47.8658 28.3303C47.7148 28.0354 47.453 27.8126 47.1379 27.7105L41.3021 25.8253C41.1438 25.7664 40.9753 25.7402 40.8066 25.7483C40.638 25.7563 40.4727 25.7984 40.3208 25.872C40.1689 25.9457 40.0334 26.0493 39.9226 26.1767C39.8118 26.3041 39.728 26.4526 39.6761 26.6133C39.6243 26.774 39.6055 26.9435 39.6209 27.1116C39.6363 27.2798 39.6857 27.443 39.7659 27.5916C39.8461 27.7402 39.9556 27.8709 40.0877 27.976C40.2199 28.0811 40.3719 28.1584 40.5347 28.2032L43.4779 29.1537L36.12 32.921C37.1469 31.416 37.6431 29.6117 37.5304 27.7932C37.4176 25.9747 36.7022 24.2456 35.4973 22.8789C34.2923 21.5123 32.6664 20.586 30.8763 20.2464C29.0862 19.9067 27.234 20.1731 25.6122 21.0035C23.9904 21.8338 22.6914 23.1808 21.9204 24.8316C21.1494 26.4825 20.9504 28.3431 21.3547 30.1197C21.759 31.8963 22.7436 33.4876 24.1531 34.6422C25.5625 35.7968 27.3165 36.449 29.1379 36.4958L25.9673 38.1158L19.4652 34.5663C19.2866 34.4685 19.0867 34.4159 18.883 34.4131C18.6793 34.4104 18.4781 34.4576 18.2968 34.5505L12.7326 37.3958C12.581 37.4672 12.4453 37.5683 12.3335 37.6932C12.2218 37.8181 12.1363 37.9642 12.0821 38.1228C12.0279 38.2814 12.0062 38.4492 12.0181 38.6164C12.0301 38.7835 12.0755 38.9466 12.1517 39.0958C12.228 39.2451 12.3334 39.3775 12.4618 39.4852C12.5902 39.5929 12.7389 39.6737 12.8991 39.7228C13.0594 39.7719 13.2278 39.7882 13.3945 39.7709C13.5612 39.7537 13.7227 39.703 13.8694 39.6221L18.8463 37.0768L25.3484 40.6295C25.5274 40.7265 25.7274 40.7784 25.931 40.7806C26.1347 40.7828 26.3357 40.7353 26.5168 40.6421L44.6431 31.3674L43.68 34.3516C43.6211 34.5098 43.5949 34.6784 43.603 34.847C43.611 35.0156 43.6531 35.1809 43.7268 35.3329C43.8004 35.4848 43.904 35.6202 44.0314 35.731C44.1588 35.8418 44.3073 35.9257 44.468 35.9775C44.6287 36.0294 44.7982 36.0482 44.9663 36.0327C45.1345 36.0173 45.2977 35.968 45.4463 35.8878C45.5949 35.8075 45.7256 35.6981 45.8307 35.5659C45.9358 35.4338 46.0131 35.2817 46.0579 35.1189L47.9431 29.2832ZM33.5463 31.2158C33.2805 31.6605 32.9384 32.055 32.5358 32.381L32.9684 33.2305C33.0882 33.4675 33.1089 33.7424 33.0259 33.9947C32.943 34.247 32.7633 34.456 32.5263 34.5758C32.2893 34.6956 32.0144 34.7163 31.7621 34.6333C31.5098 34.5504 31.3008 34.3707 31.181 34.1337L30.7579 33.2937C30.4393 33.3834 30.1123 33.4395 29.7821 33.461C29.7021 33.4674 29.621 33.4705 29.5389 33.4705C29.12 33.4668 28.7059 33.381 28.32 33.2179C28.0872 33.109 27.9052 32.9147 27.8117 32.6752C27.7182 32.4358 27.7204 32.1696 27.8178 31.9318C27.9152 31.6939 28.1004 31.5026 28.335 31.3976C28.5695 31.2925 28.8355 31.2817 29.0779 31.3674C29.2442 31.4425 29.426 31.4771 29.6084 31.4684C29.8048 31.4563 29.9994 31.4246 30.1894 31.3737C30.3846 31.3188 30.5756 31.2502 30.761 31.1684C31.1947 30.951 31.5606 30.619 31.8189 30.2084C32.0968 29.7347 31.9768 29.501 31.9231 29.3905C31.8349 29.2215 31.6894 29.0894 31.5126 29.0179C31.3277 28.9424 31.1311 28.8996 30.9315 28.8916C30.7291 28.891 30.5275 28.9164 30.3315 28.9674C30.1512 29.0162 29.9766 29.084 29.8105 29.1695C29.5394 29.3073 29.2574 29.4224 28.9673 29.5137C28.5748 29.6369 28.1661 29.7007 27.7547 29.7032C27.276 29.7048 26.8024 29.6047 26.3652 29.4095C25.7666 29.148 25.276 28.6886 24.9758 28.1084C24.7604 27.6616 24.6638 27.1667 24.6953 26.6717C24.7268 26.1766 24.8854 25.698 25.1558 25.2821C25.4184 24.8535 25.7527 24.4732 26.1442 24.1579L25.7337 23.34C25.6667 23.2222 25.6243 23.092 25.6092 22.9573C25.594 22.8226 25.6064 22.6863 25.6455 22.5565C25.6846 22.4268 25.7496 22.3063 25.8367 22.2024C25.9237 22.0985 26.0309 22.0134 26.1518 21.9522C26.2728 21.891 26.4048 21.855 26.5401 21.8463C26.6753 21.8377 26.8109 21.8566 26.9387 21.9019C27.0664 21.9472 27.1836 22.018 27.2831 22.1099C27.3827 22.2019 27.4626 22.3131 27.5179 22.4368L27.9442 23.2832C28.2731 23.2013 28.6096 23.1537 28.9484 23.141C29.3764 23.1233 29.8042 23.1821 30.2115 23.3147C30.4507 23.4069 30.6453 23.5873 30.7554 23.8187C30.8655 24.0502 30.8827 24.315 30.8033 24.5587C30.724 24.8024 30.5542 25.0064 30.329 25.1286C30.1037 25.2509 29.8402 25.2821 29.5926 25.2158C29.4133 25.1577 29.2251 25.132 29.0368 25.14C28.8335 25.1473 28.6315 25.1748 28.4336 25.2221L28.3737 25.2347C28.2161 25.27 28.0619 25.3186 27.9126 25.38C27.4888 25.5913 27.1291 25.9118 26.8705 26.3084C26.7747 26.4355 26.714 26.5856 26.6946 26.7436C26.6752 26.9016 26.6977 27.0619 26.76 27.2084C26.8554 27.3753 27.0029 27.5062 27.18 27.581C27.3561 27.6588 27.5464 27.6997 27.7389 27.701H27.7452C27.9572 27.7002 28.1678 27.6683 28.3705 27.6063C28.5553 27.5477 28.7349 27.4738 28.9073 27.3853C29.2014 27.2352 29.5105 27.1166 29.8294 27.0316C30.2005 26.935 30.5828 26.8883 30.9663 26.8926C31.4104 26.9043 31.8489 26.9952 32.261 27.161C32.8877 27.4135 33.4016 27.8848 33.7073 28.4874C33.9214 28.9164 34.0194 29.394 33.9917 29.8726C33.964 30.3513 33.8084 30.8143 33.5463 31.2158Z" fill="#248B13"/>
      </svg>
        <h4>{item.name}</h4>
      </li>
      </Link>
    ))
  )}
      </ul>

      <Link to={'/new-client'} class="btn btn-success  crear-cliente">CREAR ClIENTE </Link>


        <Menu clase={'clientes'}/>
        </Fragment>
        )
}

export default ListClients;